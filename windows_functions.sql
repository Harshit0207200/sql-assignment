
-- Windows Functions:

-- Question 1: Rank the customers based on the total amount they've spent on rentals
SELECT customer_id, 
       SUM(amount) AS total_spent,
       RANK() OVER (ORDER BY SUM(amount) DESC) AS customer_rank
FROM payment
GROUP BY customer_id;

-- Question 2: Calculate the cumulative revenue generated by each film over time
SELECT f.title, 
       p.payment_date, 
       SUM(p.amount) OVER (PARTITION BY i.film_id ORDER BY p.payment_date) AS cumulative_revenue
FROM payment p
JOIN rental r ON p.rental_id = r.rental_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id;

-- Question 3: Determine the average rental duration for each film, considering films with similar lengths
SELECT f.title, 
       f.length,
       AVG(r.rental_duration) OVER (PARTITION BY f.length) AS avg_rental_duration
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id;

-- Question 4: Identify the top 3 films in each category based on their rental counts
SELECT c.name AS category_name, 
       f.title, 
       COUNT(r.rental_id) AS rental_count,
       RANK() OVER (PARTITION BY c.name ORDER BY COUNT(r.rental_id) DESC) AS rank_in_category
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name, f.title;

-- Question 5: Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers
SELECT customer_id, 
       COUNT(*) AS total_rentals,
       AVG(COUNT(*)) OVER () AS avg_rentals_across_customers,
       COUNT(*) - AVG(COUNT(*)) OVER () AS difference_from_avg
FROM rental
GROUP BY customer_id;

-- Question 6: Find the monthly revenue trend for the entire rental store over time
SELECT DATE_FORMAT(payment_date, '%Y-%m') AS month,
       SUM(amount) AS monthly_revenue,
       SUM(SUM(amount)) OVER (ORDER BY DATE_FORMAT(payment_date, '%Y-%m')) AS cumulative_revenue
FROM payment
GROUP BY DATE_FORMAT(payment_date, '%Y-%m');

-- Question 7: Identify the customers whose total spending on rentals falls within the top 20% of all customers
WITH customer_spending AS (
    SELECT customer_id, 
           SUM(amount) AS total_spent,
           NTILE(5) OVER (ORDER BY SUM(amount) DESC) AS percentile
    FROM payment
    GROUP BY customer_id
)
SELECT customer_id, total_spent
FROM customer_spending
WHERE percentile = 1;

-- Question 8: Calculate the running total of rentals per category, ordered by rental count
SELECT c.name AS category_name, 
       COUNT(r.rental_id) AS rental_count,
       SUM(COUNT(r.rental_id)) OVER (PARTITION BY c.name ORDER BY COUNT(r.rental_id)) AS running_total
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name;

-- Question 9: Find the films that have been rented less than the average rental count for their respective categories
WITH category_avg_rentals AS (
    SELECT c.name AS category_name, 
           f.title, 
           COUNT(r.rental_id) AS film_rental_count,
           AVG(COUNT(r.rental_id)) OVER (PARTITION BY c.name) AS avg_category_rentals
    FROM rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    GROUP BY c.name, f.title
)
SELECT category_name, title, film_rental_count
FROM category_avg_rentals
WHERE film_rental_count < avg_category_rentals;

-- Question 10: Identify the top 5 months with the highest revenue and display the revenue generated in each month
SELECT DATE_FORMAT(payment_date, '%Y-%m') AS month,
       SUM(amount) AS monthly_revenue
FROM payment
GROUP BY DATE_FORMAT(payment_date, '%Y-%m')
ORDER BY SUM(amount) DESC
LIMIT 5;
